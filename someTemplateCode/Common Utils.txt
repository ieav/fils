
import com.alibaba.druid.support.json.JSONUtils;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.huawei.idt.libing.vulnerabilitymanagementservice.model.JsonResponse;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;


public class NormalUtils {

    @Autowired
    private RestTemplate restTemplate;


    /**
     * 校验是否为空，不可为空格
     * null ---> return true
     * not Null  ----return false
     *
     * @param str
     * @return
     */
    public Boolean isStrNull(final CharSequence str) {

        if (null == str || str.length() == 0) {
            return true;
        }

        // blanck
        int strLen;
        if (str == null || (strLen = str.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(str.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
    
    //避免toString 的时候 报空指针
    public String getStringValue(Object object) {
        if (null == object) {
            return "";
        } else {
            return object.toString();
        }
    }
    

    /**
     *  字符串为空使用空空格替代
     * @param str
     * @return
     */
    public String ifNullReturnblack(String str){
        return isStrNull(str)?"":str;
    }


    /**
     * 检查文件类型  是否是excel 类型
     * @param file
     * @return
     */
    public static Boolean checkFile(MultipartFile file){
        //检查文件是否为空
        boolean empty = file.isEmpty();
        if(empty || file == null){
            return  false;
        }
        //检查文件是否是excel类型文件
        String filename = file.getOriginalFilename();
        if(!filename.endsWith("xls") && !filename.endsWith("xlsx")){
            return false;
        }
        return true;
    }



    /**
     * 获取UUID
     * @return
     */
    public  String getUUID() {
        return UUID.randomUUID().toString().replace("-", "");
    }

    /**
     * 获取系统当前时间
     *
     * @return yyyy-MM-dd HH:mm:ss
     */
    public String getNowTime() {
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        return df.format(new Date());
    }

    public String getNowTimeToString() {
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        return df.format(new Date()).replace(":","").replaceAll("-","");
    }

    /**
     * http 请求封装
     *
     * @param url
     * @return ResponseEntity<String> response
     */
    public JsonResponse doGetRequest(String url, String Authorization) {
        ResponseEntity<String> response = null;
        JsonResponse jsonResponse = new JsonResponse();

        // 设置请求头
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.parseMediaType("application/json;charset=UTF-8"));
        headers.set("Accept-Charset", "UTF-8");

        if (!StringUtils.isEmpty(Authorization)) {
            headers.set("Authorization", Authorization);
        }

        // 请求体
        HttpEntity<String> requestEntity = new HttpEntity<String>(null, headers);

        RestTemplate restTemplate = new RestTemplate();
        restTemplate.getMessageConverters().set(1, new StringHttpMessageConverter(StandardCharsets.UTF_8));//中文乱码
        response = restTemplate.exchange(url, HttpMethod.GET, requestEntity, String.class);

        if (!"200".equals(response.getStatusCode().toString())) {

            jsonResponse.setResult(null);
            return jsonResponse;
        } else {
            jsonResponse.setCode("200");
            jsonResponse.setMessage("success");

            JSONObject jo = JSONObject.parseObject(response.getBody());
            jsonResponse.setResult(jo);
        }

        return jsonResponse;
    }

    /**
     * 不需要token 的 post
     * 调用接口获取数据，成功失败 自己判断， 是否获取到数据自己判断
     *
     * @param url    请求的url
     * @param params post要传的参数  Map<String,Object>
     * @return
     */
    public JsonResponse doPostRequst(String url, Map<String, Object> params) {


        /* 校验 */
        if (null == params || params.size() == 0) {
            return new JsonResponse("500", " 请求参数为空！");
        }

        if (isStrNull(url)) {
            return new JsonResponse("500", " url 为空！");
        }

        HttpHeaders headers = new HttpHeaders();
        MediaType contentType = MediaType.parseMediaType("application/json;charset=UTF-8");
        headers.setContentType(contentType);

        // 请求体
        HttpEntity<String> entity = new HttpEntity<String>(JSONUtils.toJSONString(params), headers);

        ResponseEntity<String> data1 = restTemplate.exchange(url, HttpMethod.POST, entity, String.class);
        JSONObject object1 = JSONObject.parseObject(data1.getBody());// 将字符串转换成json对象

        return new JsonResponse("200", "", object1);

    }

    /**
     * 不需要token 的 post
     * 调用接口获取数据，成功失败 自己判断， 是否获取到数据自己判断
     *
     * @param url    请求的url
     * @param params post要传的参数  Map<String,Object>
     * @return
     */
    public JsonResponse doPostRequst(String url, List<Map<String, Object>> params) {


        /* 校验 */
        if (null == params || params.size() == 0) {
            return new JsonResponse("500", " 请求参数为空！");
        }

        if (isStrNull(url)) {
            return new JsonResponse("500", " url 为空！");
        }

        HttpHeaders headers = new HttpHeaders();
        MediaType contentType = MediaType.parseMediaType("application/json;charset=UTF-8");
        headers.setContentType(contentType);

        // 请求体
        HttpEntity<String> entity = new HttpEntity<String>(JSONUtils.toJSONString(params), headers);

        ResponseEntity<String> data1 = restTemplate.exchange(url, HttpMethod.POST, entity, String.class);
        JSONObject object1 = JSONObject.parseObject(data1.getBody());// 将字符串转换成json对象

        return new JsonResponse("200", "", object1);

    }
}
