 /**
     * 
     *
     * @param sheetName sheet名称
     * @param titleArrary  excel 标题
     * @param dataList 数据列表
     * @param filePath 文件路径
     *  @param fileName 文件名
     * @throws Exception
     *
     */
    public void exportSXSSFExcel(String sheetName, String[] titleArrary, List<String[]> dataList, String filePath, HttpServletResponse response, String fileName){

        long startt=System.currentTimeMillis();
        System.out.println("==================excel write start !====================");

        // 内存中缓存记录数 建议10000 不然会导致内存溢出
//        SXSSFWorkbook workbook = new SXSSFWorkbook(1000);
        XSSFWorkbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet(sheetName);

        Font titleFont = workbook.createFont();
        titleFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
        CellStyle titleCellStyle = workbook.createCellStyle();
        titleCellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
        titleCellStyle.setFont(titleFont);
        titleCellStyle.setFillBackgroundColor(IndexedColors.PALE_BLUE.index);

        int rowIndex = 0;
        Row row = sheet.createRow(rowIndex++);

        // 标题
        int cellSize = titleArrary.length;
        for (int i = 0; i < cellSize; i++) {
            Cell cell = row.createCell(i);
            cell.setCellStyle(titleCellStyle);
            cell.setCellValue(titleArrary[i]);
            if (titleArrary[i] != null) {
                if(i==0){
                    sheet.setColumnWidth(i, titleArrary[i].getBytes().length * 2 * 600);
                }else{
                    sheet.setColumnWidth(i, titleArrary[i].getBytes().length * 2 * 180);
                }
            }
        }

        // 数据 样式
        CellStyle dataCellStyle = workbook.createCellStyle();
        dataCellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);

        // 锁定单元格样式
        XSSFCellStyle lockedStyle= (XSSFCellStyle) workbook.createCellStyle();
        lockedStyle.setLocked(true);
        lockedStyle.setBorderBottom(BorderStyle.THIN);
        lockedStyle.setBorderLeft(BorderStyle.THIN);
        lockedStyle.setBorderRight(BorderStyle.THIN);
        lockedStyle.setBorderTop(BorderStyle.THIN);
        lockedStyle.setFillPattern(XSSFCellStyle.SOLID_FOREGROUND);
        lockedStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
        lockedStyle.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER); // 垂直居中

        //锁定 链接样式
        XSSFCellStyle lockedLinkStyle= (XSSFCellStyle) workbook.createCellStyle();
        XSSFFont font = (XSSFFont) workbook.createFont();
        font.setFontName(HSSFFont.FONT_ARIAL);

        //设置字体下划线
        font.setUnderline((byte) 1);
        //设置字体颜色
        font.setColor(HSSFColor.BLUE.index);
        //设置字体
        lockedLinkStyle.setFont(font);

        lockedLinkStyle.setLocked(true);
        lockedLinkStyle.setBorderBottom(BorderStyle.THIN);
        lockedLinkStyle.setBorderLeft(BorderStyle.THIN);
        lockedLinkStyle.setBorderRight(BorderStyle.THIN);
        lockedLinkStyle.setBorderTop(BorderStyle.THIN);
        lockedLinkStyle.setFillPattern(XSSFCellStyle.SOLID_FOREGROUND);
        lockedLinkStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
        lockedLinkStyle.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER); // 垂直居中

        // 非锁定链接样式
        XSSFCellStyle linkStyle = (XSSFCellStyle) workbook.createCellStyle();
        linkStyle.setFont(font);
        linkStyle.setLocked(false);
//        linkStyle.setBorderBottom(BorderStyle.THIN);
//        linkStyle.setBorderLeft(BorderStyle.THIN);
//        linkStyle.setBorderRight(BorderStyle.THIN);
//        linkStyle.setBorderTop(BorderStyle.THIN);

        XSSFCellStyle unLockedStyle = (XSSFCellStyle) workbook.createCellStyle();
        unLockedStyle.setLocked(false);

        CreationHelper createHelper = workbook.getCreationHelper();
        for (String[] data : dataList) {
            row = sheet.createRow(rowIndex);
            // 遍历列
            for (int i = 0; i < data.length; i++) {
                Cell cell = row.createCell(i);
                cell.setCellStyle(dataCellStyle);
                cell.setCellValue(data[i]);

                /*0	ID,*/
                /*1	产品/平台版本,*/
                /*2	使用位置, 父节点 名称*/
                /*3	软件名称,*/
                if(i==0||i==1||i==2||i==3){
                    cell.setCellValue(data[i]);
                    cell.setCellStyle(lockedStyle);
                }

                /*4	软件版本,*/
                if(i==4&&!utils.isStrNull(data[i])){
                    String [] urlAndVul=data[i].split("#@#");

                    //设置超链接
                    Hyperlink link = createHelper.createHyperlink(Hyperlink.LINK_URL);
                    link.setAddress(urlAndVul[1]);
                    link.setLabel(data[0]);
                    cell.setHyperlink(link);

                    cell.setCellStyle(lockedLinkStyle);
                    cell.setCellValue(urlAndVul[0]);
                }else if(i==5){  /*5	PDM编码,*/
                    cell.setCellValue(data[i]);
                    cell.setCellStyle(lockedStyle);
                }else if(i==6){  /*6	漏洞CVE编码,*/

                    Hyperlink link = createHelper.createHyperlink(Hyperlink.LINK_URL);
                    link.setAddress(BASE_CVE_URL+data[i]);
                    link.setLabel(data[i]);
                    cell.setHyperlink(link);

                    cell.setCellStyle(lockedLinkStyle);
                    cell.setCellValue(data[i]);
                }else if(i==7){  /*7	评分,*/
                    cell.setCellStyle(lockedStyle);
                    cell.setCellValue(data[i]);
                }else if(i==8){  /*8	漏洞修复状态,*/
                    cell.setCellValue(data[i]);
                    cell.setCellStyle(unLockedStyle);
                }else if(i==9) { /*9	DTS单号,*/
                    if(!utils.isStrNull(data[i])){
                        //设置超链接
                        Hyperlink link = createHelper.createHyperlink(Hyperlink.LINK_URL);
                        link.setAddress(BASE_DTS_URL+data[i]);
                        link.setLabel(data[i]);
                        cell.setHyperlink(link);

                        cell.setCellStyle(linkStyle);
                        cell.setCellValue(data[i]);

                    }else{
                        cell.setCellStyle(unLockedStyle);
                        cell.setCellValue(data[i]);
                    }

                }else if(i==10){ /*10	修复版本*/
                    cell.setCellValue(data[i]);
                    cell.setCellStyle(unLockedStyle);
                }else if(i==11||i==12){   /*11	pbi_id,*//*12	nodePbiId*/
                    cell.setCellStyle(lockedStyle);
                    cell.setCellValue(data[i]);
                }

            }
            rowIndex++;
        }

        sheet.autoSizeColumn(2);sheet.autoSizeColumn(10);

        sheet.setColumnHidden(11,true);
        sheet.setColumnHidden(12,true);

        XSSFSheet sheet1= (XSSFSheet) sheet;
        sheet.protectSheet("abcdefg");
        ((XSSFSheet) sheet1).enableLocking();

        CTSheetProtection sheetProtection = sheet1.getCTWorksheet().getSheetProtection();
        sheetProtection.setSelectLockedCells(false);
        sheetProtection.setSelectUnlockedCells(false);
        sheetProtection.setFormatCells(true);
        sheetProtection.setFormatColumns(true);
        sheetProtection.setFormatRows(true);
        sheetProtection.setInsertColumns(true);
        sheetProtection.setInsertRows(false);
        sheetProtection.setInsertHyperlinks(true);
        sheetProtection.setDeleteColumns(true);
        sheetProtection.setDeleteRows(true);
        sheetProtection.setSort(false);
        sheetProtection.setAutoFilter(false);
        sheetProtection.setPivotTables(true);
        sheetProtection.setObjects(true);
        sheetProtection.setScenarios(true);

        sheet.setAutoFilter(CellRangeAddress.valueOf("A1:K1")); /* 添加筛选项 */

        /* 下拉框 */
        XSSFDataValidationHelper dvHelper = new XSSFDataValidationHelper((XSSFSheet) sheet);
        XSSFDataValidationConstraint dvConstraint = (XSSFDataValidationConstraint) dvHelper.createExplicitListConstraint(new String[]{"Unaffected", "Risk-Accepted", "Unfixed","Fixed"});
        CellRangeAddressList addressList = new CellRangeAddressList(1, dataList.size(), 8, 8);
        XSSFDataValidation validation = (XSSFDataValidation)dvHelper.createValidation(dvConstraint, addressList);
        validation.setShowErrorBox(true);
        validation.setSuppressDropDownArrow(true);
        sheet.addValidationData(validation);

        if (!fileName.endsWith(".xlsx")) {
            fileName += ".xlsx";
        }

        try {
            if(StringUtils.isNotEmpty(filePath)){
                File saveFile = new File(filePath);
                if (!saveFile.getParentFile().exists()) {
                    saveFile.getParentFile().mkdirs();
                }
                saveFile.createNewFile();

                OutputStream outputStream = new FileOutputStream(saveFile);
                workbook.write(outputStream);
                outputStream.close();
            }
//                if(response!=null){
//                    response.setContentType("application/vnd.ms-excel;charset=utf-8");
//                    fileName = response.encodeURL(new String(fileName.getBytes("utf-8"), "iso8859-1"));
//                    response.addHeader("Content-Disposition", "attachment;filename=" + fileName);
//                    OutputStream outputStream =response.getOutputStream();
//                    workbook.write(outputStream);
//                    outputStream.close();
//                }
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println("excel 写入耗时： "+(System.currentTimeMillis()-startt)+"  毫秒");

    }
